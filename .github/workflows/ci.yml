name: build-and-push

on:
  push:
    branches: ["dev", "main"]
  pull_request:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  IMAGE_REPO_PREFIX: ghcr.io/${{ github.repository_owner }}/crowdclue

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.sha.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Git SHA
        id: sha
        run: echo "::set-output name=sha::${GITHUB_SHA::8}"

  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push backend image
        env:
          IMAGE_TAG: ${{ env.IMAGE_REPO_PREFIX }}-backend:${{ needs.prepare.outputs.sha }}
        run: |
          docker build -t "${IMAGE_TAG}" ./backend
          docker push "${IMAGE_TAG}"

      - name: Build & push frontend image
        env:
          IMAGE_TAG: ${{ env.IMAGE_REPO_PREFIX }}-frontend:${{ needs.prepare.outputs.sha }}
        run: |
          # pass optional admin secret / api base at build time (for demo only)
          docker build \
            --build-arg VITE_ADMIN_SECRET="${{ secrets.VITE_ADMIN_SECRET }}" \
            --build-arg VITE_API_BASE="${{ secrets.VITE_API_BASE || '' }}" \
            -t "${IMAGE_TAG}" ./frontend
          docker push "${IMAGE_TAG}"

  optional-deploy:
    needs: build-and-push
    if: github.ref == 'refs/heads/dev' && secrets.KUBECONFIG != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set KUBECONFIG
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          echo "$KUBECONFIG" > kubeconfig && export KUBECONFIG=$(pwd)/kubeconfig
          kubectl config view

      - name: Update deployments with new image tags
        env:
          BACKEND_IMG: ${{ env.IMAGE_REPO_PREFIX }}-backend:${{ needs.prepare.outputs.sha }}
          FRONTEND_IMG: ${{ env.IMAGE_REPO_PREFIX }}-frontend:${{ needs.prepare.outputs.sha }}
        run: |
          kubectl set image deployment/backend backend=${BACKEND_IMG} --namespace default || true
          kubectl set image deployment/frontend frontend=${FRONTEND_IMG} --namespace default || true
